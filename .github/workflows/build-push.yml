name: Build and upload to PyPi

on: [push, pull_request]

jobs:
  build_wheels:
    name: Build wheels ${{ matrix.os }} (${{ matrix.platform }})
    if: "(!contains(github.event.pull_request.labels.*.name, 'disable-test-build')) || github.event_name == 'push' && endsWith(github.event.ref, 'scylla')"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-24.04
            platform: x86_64

          - os: ubuntu-24.04
            platform: PyPy

          - os: windows-2022
            platform: win64

          - os: windows-latest
            platform: PyPy

          - os: macos-14
            platform: all

          - os: macos-13
            platform: all

          - os: macos-latest
            platform: PyPy

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: '3.13'
      - name: Enable pip installing globally
        if: runner.os == 'MacOs' || runner.os == 'Windows'
        run: |
          echo "PIP_BREAK_SYSTEM_PACKAGES=1" >> $GITHUB_ENV

      - name: Install cibuildwheel
        run: |
          python3 -m pip install cibuildwheel==2.22.0 uv==0.5.23

      - name: Install OpenSSL for Windows
        if: runner.os == 'Windows'
        run: |
          choco install openssl --version=3.3.2 -f -y

      - name: Install Conan
        if: runner.os == 'Windows'
        uses: turtlebrowser/get-conan@main

      - name: configure libev for Windows
        if: runner.os == 'Windows'
        run: |
          conan profile detect
          conan install conanfile.py

      - name: Install OpenSSL for MacOS
        if: runner.os == 'MacOs'
        run: |
          brew install libev

      - name: Overwrite for Linux PyPy
        if: runner.os == 'Linux' && matrix.platform == 'PyPy'
        run: |
          echo "CIBW_BUILD=pp*" >> $GITHUB_ENV

      - name: Overwrite for Windows PyPY
        if: runner.os == 'Windows' && matrix.platform == 'PyPy'
        run: |
          echo "CIBW_BUILD=pp*" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

      - name: Overwrite for MacOs PyPy
        if: runner.os == 'MacOs' && matrix.platform == 'PyPy'
        run: |
          echo "CIBW_BUILD=pp*" >> $GITHUB_ENV

      - name: Overwrite for macos-13
        if: matrix.os == 'macos-13' && matrix.platform == 'all'
        run: |
          echo "MACOSX_DEPLOYMENT_TARGET=13.0" >> $GITHUB_ENV

      - name: Overwrite for macos-14
        if: matrix.os == 'macos-14' && matrix.platform == 'all'
        run: |
          echo "MACOSX_DEPLOYMENT_TARGET=14.0" >> $GITHUB_ENV

      - name: Build wheels
        run: |
          python3 -m cibuildwheel --output-dir wheelhouse

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}-${{ matrix.platform }}
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    if: "(!contains(github.event.pull_request.labels.*.name, 'disable-test-build'))|| github.event_name == 'push' && endsWith(github.event.ref, 'scylla')"
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        name: Install Python

      - name: Build sdist
        run: |
          pip install build
          python -m build --sdist
          
      - uses: actions/upload-artifact@v4
        with:
          name: source-dist
          path: dist/*.tar.gz

  build_wheels_extra_arch:
    if: "(!contains(github.event.pull_request.labels.*.name, 'disable-test-build'))|| github.event_name == 'push' && endsWith(github.event.ref, 'scylla')"
    # The host should always be linux
    runs-on: ubuntu-24.04
    name: Build extra arch ${{ matrix.archs }} wheels
    strategy:
      fail-fast: false
      matrix:
        archs: [ aarch64,]  # ppc64le ]

    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        id: qemu
        uses: docker/setup-qemu-action@v3
        with:
          platforms: all
          image: 'docker.io/tonistiigi/binfmt:desktop-v8.1.5'
        if: runner.os == 'Linux'

      - uses: actions/setup-python@v5
        name: Install Python
        with:
          python-version: '3.13'

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel==2.22.0

      - name: Build wheels
        env:
          CIBW_BUILD: "cp39* cp310* cp311* cp312* cp313*" # limit to specific version since it take much more time than jobs limit
        run: |
          python -m cibuildwheel --archs  ${{ matrix.archs }} --output-dir wheelhouse

      - uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.archs }}
          path: ./wheelhouse/*.whl

  upload_pypi:
    needs: [build_wheels, build_wheels_extra_arch, build_sdist]
    runs-on: ubuntu-24.04
    permissions:
      id-token: write

    # upload to PyPI on every tag starting with 'v'
    if: github.event_name == 'push' && endsWith(github.event.ref, 'scylla')
    # alternatively, to publish when a GitHub Release is created, use the following rule:
    # if: github.event_name == 'release' && github.event.action == 'published'
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
